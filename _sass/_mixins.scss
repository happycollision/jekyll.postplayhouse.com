@mixin clearfix {
  @include pie-clearfix;
}

@mixin pie-clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin border-radius($rad) {
  border-radius: $rad;
}

@mixin rotate ($amount) {
  -webkit-transform: rotate($amount);
  -moz-transform:    rotate($amount);
  -ms-transform:     rotate($amount);
  -o-transform:      rotate($amount);
  transform:         rotate($amount);
}

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xs {
      @media (max-width: 767px) { @content; }       // Mobile Devices
    }
    @else if $min == sm {
      @media (min-width: 768px) { @content; }       // Tablet Devices
    }
    @else if $min == md {
      @media (min-width: 992px) { @content; }       // Desktops
    }
    @else if $min == lg {
      @media (min-width: 1200px) { @content; }      // Widescreen Desktops
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @if $type == list {
    $list: $min;
    $min: nth($list, 1);
    $max: nth($list, 2);
    $type: number;
  }
  @if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;

    @if $min != 0 and $max != 0 {
      $query: "(min-width: #{$min}) and (max-width: #{$max})";
    } // set both min and max
    @else if $min != 0 and $max == 0 {
      $query: "(min-width: #{$min})";
    } // set just min
    @else if $min == 0 and $max != 0 {
      $query: "(max-width: #{$max})";
    } // set just max

    @media #{$query} { @content; }
  }
}

@mixin button_base() {
  background: $button; /* Old browsers */
  background: -webkit-linear-gradient(top, $button 0%, $button-tint 100%); /* Chrome 10+, Safari 5.1+ */
  background:   linear-gradient(to bottom, $button 0%, $button-tint 100%); /* W3C */
  border: none;
  border-bottom: 3px solid $button-edge;
  border-radius: 2px;
  color: $button-text;
  display: inline-block;
  padding: 11px 24px 10px;
  text-decoration: none;
  font-size: 100%;
}

@mixin button() {
  @include button_base();

  &:hover,
  &:focus {
    background: $button-hover; /* Old browsers */
    background: -webkit-linear-gradient(top, $button-hover 0%, $button-hover-tint 100%); /* Chrome 10+, Safari 5.1+ */
    background:   linear-gradient(to bottom, $button-hover 0%, $button-hover-tint 100%); /* W3C */
    outline: none;
  }

  &:active {
    background: $button-tint; /* Old browsers */
    background: -webkit-linear-gradient(top, $button-tint 0%, $button 100%); /* Chrome 10+, Safari 5.1+ */
    background:   linear-gradient(to bottom, $button-tint 0%, $button 100%); /* W3C */
    border: none;
    border-top: 3px solid $button-edge;
    padding: 10px 24px 11px;
  }

  &[disabled], &.disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      @include button_base();
      opacity: 0.5;
    }
  }

}
